"""Polaroid-style photographs of New York City pigeons generated by AI."""
from __future__ import annotations

import io
from base64 import b64decode
from datetime import datetime
from pathlib import Path

import click
import openai
from PIL import Image
from rich import print


@click.command()
@click.option("--output", "-o", type=Path, default=".")
def cli(output):
    """Polaroid-style photographs of New York City pigeons generated by AI."""
    # Get an image
    image = get_pigeon_polaroid()

    # Write it out to the filesystem
    # with the timestamp as the file name
    filename = f"{datetime.now().isoformat()}.png"
    filepath = output / filename
    filepath.parent.mkdir(parents=True, exist_ok=True)
    print(f"Saving image to {filepath}...")
    image.save(filepath)


def get_pigeon_polaroid() -> Image:
    """Generate a Polaroid-style photograph of a pigeon in Manhattan."""
    print("Generating image...")

    # Connect to OpenAI
    client = openai.OpenAI()

    # Prepare our prompt
    prompt = """A close-up image that captures the essence of a pigeon. The image evokes feelings from the 1970s with nostalgic charm similar to photographs taken by Polaroid instant cameras. The Manhattan skyline can be subtly hinted at in the background, infusing subtle urban elements into the frame. The pigeon should dominate the foreground, its details captured meticulously. There should be no visible text."""

    # Request an image from the API
    response = client.images.generate(
        model="dall-e-3",
        prompt=prompt,
        size="1024x1024",
        quality="hd",
        style="natural",
        n=1,
        response_format="b64_json",
    )
    print("...image generated.")

    # Write to an in-memory PIL object
    data = response.data[0].b64_json
    assert isinstance(data, str)
    bytes = b64decode(data)
    image = Image.open(io.BytesIO(bytes))

    # Return that object
    return image


if __name__ == "__main__":
    cli()
