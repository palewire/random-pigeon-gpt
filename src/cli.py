"""Polaroid-style photographs of New York City pigeons generated by AI."""
from __future__ import annotations

import io
from datetime import datetime
from pathlib import Path

import click
import openai
import requests
from PIL import Image
from rich import print


@click.command()
@click.option("--output", "-o", type=Path(), default=".")
def cli(output: Path) -> None:
    """Polaroid-style photographs of New York City pigeons generated by AI."""
    # Get an image
    image = get_pigeon_polaroid()

    # Write it out to the filesystem
    # with the timestamp as the file name
    filename = f"{datetime.now()}.png"
    filepath = output / filename
    filepath.parent.mkdir(parents=True, exist_ok=True)
    print(f"Saving image to {filepath}...")
    image.save(filepath)


def get_pigeon_polaroid() -> Image:
    """Generate a Polaroid-style photograph of a pigeon in Manhattan."""
    print("Generating image...")

    # Connect to OpenAI
    client = openai.OpenAI()

    # Prepare our prompt
    prompt = """A close-up image that captures the essence of a pigeon in Manhattan. The image should evoke feelings from the 1970s, with the nostalgic charm similar to that of Polaroids. The city's skyline or other New York City landmarks like Central Park, the Hudson River, the Statue of Liberty, the New York Public Library, the Brooklyn Bridge, the Guggenheim, Times Square, Chinatown, Tribeca, the Upper West Side or Broadway can be subtly hinted at in the background, infusing urban elements into the frame. The pigeon should dominate the foreground, its details captured meticulously. The image should fill the entire space with no frame and not border around it."""

    # Request an image from the API
    response = client.images.generate(
        model="dall-e-3",
        prompt=prompt,
        size="1024x1024",
        quality="hd",
        style="vivid",
        n=1,
    )
    print("...image generated.")

    # Pull out the URL
    image_url = response.data[0].url

    # Download it
    print("Downloading image...")
    image_response = requests.get(image_url, stream=True)
    assert image_response.ok

    # Write to an in-memory PIL object
    image = Image.open(io.BytesIO(image_response.content))
    print("...image downloaded.")

    # Return that object
    return image


if __name__ == "__main__":
    cli()
